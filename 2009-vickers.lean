
import Mathlib.Data.Vector.Basic
import Mathlib.Data.Nat.Digits
import Mathlib.Data.Real.Basic
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Rat.Denumerable

/-

The finite powerset of a set.
We show that in the presence of a `Fintype` it is the same as the ordinary powerset,
and in the case of `‚Ñï, ‚Ñö, ‚Ñù, ‚ÑÇ` it is not the same.

Inspired by:

Localic completion of generalized metric spaces II: Powerlocales
STEVEN VICKERS
-/

def F X := { A : Set X | Set.Finite A}

-- The ordinary powerset can be defined in these two, identical, ways:
def P X := { A : Set X | True}
def P' X := ùí´ (Set.univ : Set X)

example : P X = P' X := by
  unfold P P'
  simp only [Set.setOf_true, Set.powerset_univ]

example [Fintype X] : F X = P X := by
  ext x
  constructor
  . intro; trivial
  . intro; exact Set.toFinite x

lemma l‚ÇÅ [Infinite X]: F X ‚â† P X := by
  intro hc
  have h‚ÇÄ: ‚àÄ S, S ‚àà F X ‚Üî S ‚àà P X := fun S ‚Ü¶ Eq.to_iff (congrArg (Membership.mem S) hc)
  have h‚ÇÅ: Set.univ ‚àà P X := by unfold P; simp
  have h‚ÇÇ: Set.univ ‚àà F X := by rw [h‚ÇÄ];exact h‚ÇÅ
  have h‚ÇÉ: Finite X := Set.finite_univ_iff.mp h‚ÇÇ
  exact not_finite X

example : F ‚Ñï ‚â† P ‚Ñï := l‚ÇÅ
example : F ‚Ñ§ ‚â† P ‚Ñ§ := l‚ÇÅ
example : F ‚Ñö ‚â† P ‚Ñö := l‚ÇÅ

instance : Infinite ‚Ñù := by
  exact @Infinite.of_injective ‚Ñù ‚Ñï _ (Œª x ‚Ü¶ x) (by
    intro x y h
    simp only [Nat.cast_inj] at h
    exact h
  )

example : F ‚Ñù ‚â† P ‚Ñù := l‚ÇÅ

instance : Infinite ‚ÑÇ := by
  exact @Infinite.of_injective ‚ÑÇ ‚Ñù _ (Œª x ‚Ü¶ x) (by
    intro x y h
    exact Complex.ofReal_inj.mp h
  )

example : F ‚ÑÇ ‚â† P ‚ÑÇ := l‚ÇÅ
